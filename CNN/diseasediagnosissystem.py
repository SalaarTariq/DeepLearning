# -*- coding: utf-8 -*-
"""DiseaseDiagnosisSystem.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YrkuD4Vv85zwEZikY3KkbeH3Wi6RR6Bj
"""

import pandas as pd


train_df = pd.read_csv("Training.csv")
test_df = pd.read_csv("Testing.csv")

print("Shape of training: ", train_df.shape)
print("Shape of testing: ", test_df.shape)

train_df.head(5)

test_df.head(5)

train_df.drop(columns=["Unnamed: 133"], inplace=True)

x_train = train_df.drop(columns=["prognosis"])
y_train = train_df[["prognosis"]]

x_test = test_df.drop(columns=["prognosis"])
y_test = test_df[["prognosis"]]

from sklearn.model_selection import GridSearchCV
from sklearn.ensemble import RandomForestClassifier

RF = RandomForestClassifier(n_jobs = 1,random_state =42)
GSCV=GridSearchCV(RF,{
    'n_estimators': [100,150,200],
    'criterion' : [ 'gini','entropy', 'log_loss'],
    'max_depth' : [7,15,20],
    'min_samples_split' : [2,5,10],
    'max_features' : [50,100,132],
    'bootstrap' : [True,False],
})

GSCV.fit(x_train,y_train)

clf_df = pd.DataFrame(GSCV.cv_results_)
clf_df.head(5)

best_param = classifier.best_params_

RF = RandomForestClassifier(n_jobs = 1,random_state =42)
RF.set_params(**best_param)
RF.fit(x_train,y_train)

from sklearn.tree import plot_tree
import matplotlib.pyplot as plt

plt.figure(figsize=(20,10))
plot_tree(RF.estimators_[0],
          max_depth= 2,
          feature_names= x_train.colums,
          filled = True,
          rounded=True)

print(f"Model Accuracy : {RF.score(x_test,y_test)} ")

pred = model.predict(x_test)

from sklearn.metrics import classification_report, confusion_matrix

print(classification_report(y_test,pred))

#Manual Predication

def make_predications(RF,feature_names):
  take_input = {}
  for f in feature_names:
    value = input(f'{f}[0:No/ 1: Yes] : ')
    take_input[f]=int(value)
  input_df = pd.DataFrame([take_input])
  predications = RF.predict(input_df)
  return predications

feature_names = x_train.columns
predication = make_predications(RF , feature_names)
print(f"Predicted Prognosis : {predication[0]}")